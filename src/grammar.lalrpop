use crate::ast::statement::*;
use crate::ast::program::*;
use crate::ast::expression::*;
use crate::ast::utils::*;

use std::str::FromStr;

grammar;

pub program: Program = {
    <stmts:statement*> => Program::new(stmts)
}

statement: Statement = {
    "use" <args:import_args> ";" => Statement::ImportStatement(args),
    <expr:expr> ";" => Statement::ExpressionStatement(expr),
    <name:identifier> "=" <rhs:expr> ";" => Statement::AssignmentStatement(name, rhs),
    "let" <name:identifier> "=" <rhs:expr> ";" => Statement::LetStatement(name, rhs),

}

import_args: Vec<String> = {
    <args:import_args> "::" <name:identifier> => append(args, name),
    <name:identifier> => vec![name],
}

expr: Expression = {
    <l:literal> => Expression::Literal(l),
    <name:identifier> "(" <args:args> ")" => Expression::Call(name, args),
    <name:identifier> => Expression::Identifier(name),
}

args: Vec<Expression> = {
    () => vec![],
    <args:args> "," <e:expr> => append(args, e),
    <e:expr> => vec![e]
}

literal: Literal = {
    <n:int> => Literal::Int(n),
    <s:string> => Literal::String(s),
}

int: i32 = {
    <n:r"-?[0-9]+"> => i32::from_str(n).unwrap()
};

string: String = {
    <s:r#""[^"]*""#> => s[1..s.len() - 1].to_owned()
};

identifier: String = {
    <s:r"[a-zA-Z_][a-zA-Z_0-9]*"> => s.to_owned()
}
