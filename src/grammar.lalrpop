use crate::ast::*;
use crate::utils::*;

use std::str::FromStr;

grammar;

pub program: Program = {
    <stmts:statement*> => Program::new(stmts)
}

statement: Statement = {
    let_statement,
    use_statement,
    expr_statement,
    assign_statement,
    if_statement,
    ret_statement,
    fn_statement
}

use_statement: Statement = "use" <args:import_args> ";" => Statement::ImportStatement(args);
let_statement: Statement = "let" <name:identifier> "=" <rhs:expr> ";" => Statement::LetStatement(name, rhs);
expr_statement: Statement = <expr:expr> ";" => Statement::ExpressionStatement(expr);
assign_statement: Statement = <name:identifier> "=" <rhs:expr> ";" => Statement::AssignmentStatement(name, rhs);
ret_statement: Statement = "ret" <expr:expr> ";" => Statement::ReturnStatement(expr);
fn_statement: Statement = "fn" <name:identifier> "(" <params:params> ")" <block:block> => Statement::FnStatement(name, params, block);
if_statement: Statement = {
    "if" <cond:expr> <if_block:block> => Statement::IfStatement(vec![Branch::new(cond, if_block)], None),
    "if" <cond:expr> <if_block:block> "else" <else_block:block> => Statement::IfStatement(vec![Branch::new(cond, if_block)], Some(else_block)),
    "if" <cond:expr> <if_block:block> "else" <else_if_stmts:if_statement> => {
        if let Statement::IfStatement(mut branches, else_stmt) = else_if_stmts {
            branches.insert(0, Branch::new(cond, if_block));
            return Statement::IfStatement(branches, else_stmt);
        } else {
            panic!("grammar error: if statement");
        }
    }
}


import_args: Vec<String> = {
    <args:import_args> "::" <name:identifier> => append(args, name),
    <name:identifier> => vec![name],
}

expr: Expression = {
    expr_1
}

expr_1: Expression = {
    <lhs:expr> "||" <rhs:expr_2> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::Or, Box::new(rhs)),
    <lhs:expr> "&&" <rhs:expr_2> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::And, Box::new(rhs)),
    expr_2
}

expr_2: Expression = {
     <lhs:expr_2> "==" <rhs:expr_3> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::EQ, Box::new(rhs)),
     <lhs:expr_2> "!=" <rhs:expr_3> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::NE, Box::new(rhs)),
     <lhs:expr_2> ">" <rhs:expr_3> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::GT, Box::new(rhs)),
     <lhs:expr_2> "<" <rhs:expr_3> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::LT, Box::new(rhs)),
     <lhs:expr_2> ">=" <rhs:expr_3> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::GTE, Box::new(rhs)),
     <lhs:expr_2> "<=" <rhs:expr_3> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::LTE, Box::new(rhs)),
     expr_3
}

expr_3: Expression = {
    <lhs:expr_3> "+" <rhs:expr_4> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::Add, Box::new(rhs)),
    <lhs:expr_3> "_" <rhs:expr_4> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::Sub, Box::new(rhs)),
    expr_4
}

expr_4: Expression = {
    "!" <expr:expr_5> => Expression::UnaryOp(UnaryOpKind::Not, Box::new(expr)),   
    
    <lhs:expr_4> "*" <rhs:expr_5> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::Mul, Box::new(rhs)),
    <lhs:expr_4> "/" <rhs:expr_5> => Expression::BinaryOp(Box::new(lhs), BinaryOpKind::Div, Box::new(rhs)),
    expr_5
}

expr_5: Expression = {
    <head:expr_5> "." <tail:expr_6> => Expression::MethodCall(Box::new(head), Box::new(tail)),
    expr_6
}

expr_6: Expression = {
    <head:expr_6> "[" <tail:expr> "]" => Expression::Index(Box::new(head), Box::new(tail)),
    <expr:expr_6> "(" <args:args> ")" => Expression::Call(Box::new(expr), args),
    expr_7
}

expr_7: Expression = {
    "null" => Expression::Null,
    <n:int> => Expression::Int(n),
    <f:float> => Expression::Float(f),
    <s:string> => Expression::String(s),
    <b:bool> => Expression::Bool(b),
    <l:list> => Expression::List(l),
    <name:identifier> => Expression::Identifier(name),
    "(" <expr:expr> ")" => expr
}

args: Vec<Expression> = {
    () => vec![],
    <args:args> "," <e:expr> => append(args, e),
    <e:expr> => vec![e]
}

params: Vec<String> = {
    () => vec![],
    <params:params> "," <param:identifier> => append(params, param),
    <param:identifier> => vec![param]
}

block: Block = {
    "{" <stmts:statement*> "}" => stmts,
}

int: i32 = {
    <n:r"-?[0-9]+"> => i32::from_str(n).unwrap()
};

float: f32 = {
    <n:r"-?[0-9]+.[0-9]+"> => f32::from_str(n).unwrap()
};

string: String = {
    <s:r#""[^"]*""#> => s[1..s.len() - 1].to_owned()
};

list: Vec<Expression> = {
    "[" <head:args> "]" => head,
}

bool: bool = {
    "true" => true,
    "false" => false
}

identifier: String = {
    <s:r"[a-zA-Z_][a-zA-Z_0-9]*"> => s.to_owned()
}

match {
    r"-?[0-9]+",
    r#""[^"]*""#,
    r"[a-zA-Z_][a-zA-Z_0-9]*",
    "use",
    ";",
    "let",
    "=", 
    "/", 
    "::", 
    "*", 
    ">", 
    "<",  
    "||", 
    "&&", 
    ".", 
    "<=", 
    ">=", 
    "+", 
    "-", 
    "==", 
    "!=", 
    "!", 
    "_", 
    "true", 
    "false", 
    "[", 
    "]", 
    "(", 
    ")", 
    "null", 
    ",",
    "if",
    "else",
    "{",
    "}", 
    "ret",
    "fn"
} else {
    " " => {},
    "\n" => {},
    "\r" => {},
    r"-?[0-9]+.[0-9]+",
    r"#.*" => {}
}
